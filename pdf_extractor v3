# === Define Paths ===
$PythonVersion = "3.11.6"
$PythonZipUrl = "https://www.python.org/ftp/python/$PythonVersion/python-$PythonVersion-embed-amd64.zip"
$UserPythonFolder = "$env:USERPROFILE\\Python"
$PythonZipPath = "$env:TEMP\\python_embed.zip"
$LogFolder = "$UserPythonFolder\\logs"
$LogFile = "$LogFolder\\python_install_log_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
$PythonExe = "$UserPythonFolder\\python.exe"
$PipInstallerPath = "$env:TEMP\\get-pip.py"

# === Define Modular Dependencies ===
$DefaultDependencies = @("pypdf", "pdf2image", "pillow")  # Default set of dependencies
$CustomDependencies = @()  # Placeholder for user-defined dependencies

# Ensure log directory exists
if (!(Test-Path $LogFolder)) { New-Item -ItemType Directory -Path $LogFolder -Force | Out-Null }

# Function to log messages
function Log-Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $LogFile -Value "[$Timestamp] $Message"
    Write-Host $Message
}

# === Initialize Dependencies ===
function Initialize-Dependencies {
    param ([string[]]$ExtraDependencies)

    $Dependencies = $DefaultDependencies + $ExtraDependencies
    return $Dependencies
}

# === Start Script Execution ===
Log-Message "Starting Python installation (No Admin Required)..."

# === Step 1: Check if Python is already installed ===
if (Test-Path $PythonExe) {
    Log-Message "Python is already installed at $UserPythonFolder"
} else {
    Log-Message "Downloading Python ZIP package..."
    try {
        Invoke-WebRequest -Uri $PythonZipUrl -OutFile $PythonZipPath
        Expand-Archive -Path $PythonZipPath -DestinationPath $UserPythonFolder -Force
        Log-Message "Python installed at: $UserPythonFolder"
    } catch { Log-Message "Error installing Python: $_"; exit }
}

# === Step 2: Add Python to User PATH if not present ===
$CurrentPath = [System.Environment]::GetEnvironmentVariable("Path", "User")
if ($CurrentPath -notlike "*$UserPythonFolder*") {
    $NewPath = "$UserPythonFolder;$CurrentPath"
    [System.Environment]::SetEnvironmentVariable("Path", $NewPath, "User")
    Log-Message "Added Python to user PATH"
}

# === Step 3: Check if pip is installed ===
$PipCheck = & "$PythonExe" -m pip --version 2>&1
if ($PipCheck -match "pip") {
    Log-Message "pip is already installed."
} else {
    Log-Message "Downloading and installing pip..."
    try {
        Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $PipInstallerPath
        & "$PythonExe" $PipInstallerPath --no-cache-dir
        Log-Message "pip installed successfully."
    } catch { Log-Message "Error installing pip: $_"; exit }
}

# === Step 4: Install Required Dependencies ===
$DependenciesToInstall = Initialize-Dependencies -ExtraDependencies $CustomDependencies

Log-Message "Checking and installing required dependencies..."
$MissingPackages = & "$PythonExe" -c "
import sys
try:
    import pypdf
    import pdf2image
    from PIL import Image
    print('')
except ModuleNotFoundError as e:
    print(e.name)" 2>&1

if ($MissingPackages -eq "") {
    Log-Message "All dependencies are already installed."
} else {
    foreach ($Package in $MissingPackages -split "`n") {
        if ($DependenciesToInstall -contains $Package) {
            Log-Message "Installing $Package..."
            $InstallOutput = & "$PythonExe" -m pip install --user --no-cache-dir $Package 2>&1
            if ($InstallOutput -match "Successfully installed") {
                Log-Message "Successfully installed $Package."
            } else {
                Log-Message "Error installing $Package: $InstallOutput"
            }
        }
    }
}

Log-Message "Python setup completed."


# === Actual Script

# === Load Required Assemblies ===
if (-not ("System.Windows.Forms.Form" -as [Type])) { 
    try { Add-Type -AssemblyName System.Windows.Forms -ErrorAction Stop }
    catch {
        $ErrorMessage = "ERROR: Failed to load System.Windows.Forms."
        Write-Host $ErrorMessage -ForegroundColor Red
        [System.Windows.Forms.MessageBox]::Show($ErrorMessage, "Critical Error", "OK", "Error")
    }
}
if (-not ("System.Drawing.Graphics" -as [Type])) { 
    try { Add-Type -AssemblyName System.Drawing -ErrorAction Stop }
    catch {
        $ErrorMessage = "ERROR: Failed to load System.Drawing."
        Write-Host $ErrorMessage -ForegroundColor Red
        [System.Windows.Forms.MessageBox]::Show($ErrorMessage, "Critical Error", "OK", "Error")
    }
}


