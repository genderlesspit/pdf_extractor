# === Define Paths ===
$PythonVersion = "3.11.6"
$PythonZipUrl = "https://www.python.org/ftp/python/$PythonVersion/python-$PythonVersion-embed-amd64.zip"
$UserPythonFolder = "$env:USERPROFILE\\Python"
$PythonZipPath = "$env:TEMP\\python_embed.zip"
$LogFolder = "$UserPythonFolder\\logs"
$LogFile = "$LogFolder\\python_install_log_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
$PythonExe = "$UserPythonFolder\\python.exe"
$PipInstallerPath = "$env:TEMP\\get-pip.py"

# === Define Modular Dependencies ===
$DefaultDependencies = @("pypdf", "pdf2image", "pillow")  # Default set of dependencies
$CustomDependencies = @()  # Placeholder for user-defined dependencies

# Ensure log directory exists
if (!(Test-Path $LogFolder)) { New-Item -ItemType Directory -Path $LogFolder -Force | Out-Null }

# Function to log messages
function Log-Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $LogFile -Value "[$Timestamp] $Message"
    Write-Host $Message
}

# === Initialize Dependencies ===
function Initialize-Dependencies {
    param ([string[]]$ExtraDependencies)

    $Dependencies = $DefaultDependencies + $ExtraDependencies
    return $Dependencies
}

# === Start Script Execution ===
Log-Message "Starting Python installation (No Admin Required)..."

# === Step 1: Check if Python is already installed ===
if (Test-Path $PythonExe) {
    Log-Message "Python is already installed at $UserPythonFolder"
} else {
    Log-Message "Downloading Python ZIP package..."
    try {
        Invoke-WebRequest -Uri $PythonZipUrl -OutFile $PythonZipPath
        Expand-Archive -Path $PythonZipPath -DestinationPath $UserPythonFolder -Force
        Log-Message "Python installed at: $UserPythonFolder"
    } catch { Log-Message "Error installing Python: $_"; exit }
}

# === Step 2: Add Python to User PATH if not present ===
$CurrentPath = [System.Environment]::GetEnvironmentVariable("Path", "User")
if ($CurrentPath -notlike "*$UserPythonFolder*") {
    $NewPath = "$UserPythonFolder;$CurrentPath"
    [System.Environment]::SetEnvironmentVariable("Path", $NewPath, "User")
    Log-Message "Added Python to user PATH"
}

# === Step 3: Check if pip is installed ===
$PipCheck = & "$PythonExe" -m pip --version 2>&1
if ($PipCheck -match "pip") {
    Log-Message "pip is already installed."
} else {
    Log-Message "Downloading and installing pip..."
    try {
        Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $PipInstallerPath
        & "$PythonExe" $PipInstallerPath --no-cache-dir
        Log-Message "pip installed successfully."
    } catch { Log-Message "Error installing pip: $_"; exit }
}

# === Step 4: Install Required Dependencies ===
$DependenciesToInstall = Initialize-Dependencies -ExtraDependencies $CustomDependencies

Log-Message "Checking and installing required dependencies..."
$MissingPackages = & "$PythonExe" -c "
import sys
try:
    import pypdf
    import pdf2image
    from PIL import Image
    print('')
except ModuleNotFoundError as e:
    print(e.name)" 2>&1

if ($MissingPackages -eq "") {
    Log-Message "All dependencies are already installed."
} else {
    foreach ($Package in $MissingPackages -split "`n") {
        if ($DependenciesToInstall -contains $Package) {
            Log-Message "Installing $Package..."
            $InstallOutput = & "$PythonExe" -m pip install --user --no-cache-dir $Package 2>&1
            if ($InstallOutput -match "Successfully installed") {
                Log-Message "Successfully installed $Package."
            } else {
                Log-Message "Error installing ${Package}: $InstallOutput"
            }
        }
    }
}

Log-Message "Python setup completed."

# === Define Base Directory Correctly ===
$ProgramDir = [System.Environment]::GetFolderPath("MyDocuments")
if (-not $ProgramDir) { $ProgramDir = "C:\PDF_Extractor" }

$ConfigPath = ".\config.txt"

# Load custom directory from config.txt if valid
if (Test-Path $ConfigPath) {
    try {
        $CustomPath = (Get-Content $ConfigPath | ConvertFrom-StringData)["ProgramDir"].Trim()
        if ($CustomPath -and (Test-Path $CustomPath)) { $ProgramDir = $CustomPath }
    } catch { Write-Host "‚ùå Error reading config.txt: $_. Using default directories." }
}

# Define required directories
$ScriptsDir = Join-Path $ProgramDir "Scripts"

# Ensure Scripts directory exists
if (!(Test-Path $ScriptsDir)) { 
    try { 
        New-Item -ItemType Directory -Path $ScriptsDir -Force | Out-Null 
        Write-Host "‚úÖ Created directory: $ScriptsDir"
    } catch { 
        Write-Host "‚ùå Error creating directory '$ScriptsDir': $($_.Exception.Message)" 
        exit
    }
}

# GitHub raw URL for `setup.py`
$SetupScriptUrl = "https://raw.githubusercontent.com/genderlesspit/pdf_extractor/main/setup.py"
$SetupScriptPath = Join-Path $ScriptsDir "setup.py"
$LocalHashPath = Join-Path $ScriptsDir "setup_hash.txt"

# Function to compute SHA256 hash of a file
function Get-FileHashSHA256 {
    param ([string]$FilePath)
    if (Test-Path $FilePath) {
        return (Get-FileHash -Path $FilePath -Algorithm SHA256).Hash
    } else {
        return ""
    }
}

# Function to fetch latest GitHub file hash
function Get-GitHubFileHash {
    try {
        $GitHubContent = Invoke-WebRequest -Uri $SetupScriptUrl -UseBasicParsing
        $GitHubHash = [System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($GitHubContent.Content))
        return -join ($GitHubHash | ForEach-Object { $_.ToString("x2") })
    } catch {
        Write-Host "‚ùå Failed to retrieve GitHub file hash: $_"
        return ""
    }
}

# Compute current local and latest GitHub hashes
$LocalHash = Get-FileHashSHA256 -FilePath $SetupScriptPath
$GitHubHash = Get-GitHubFileHash

# Compare hashes
if ($LocalHash -ne $GitHubHash) {
    Write-Host "üîÑ New version detected! Updating setup.py..."
    try {
        Invoke-WebRequest -Uri $SetupScriptUrl -OutFile $SetupScriptPath -ErrorAction Stop
        $GitHubHash | Set-Content -Path $LocalHashPath -Force
        Write-Host "‚úÖ setup.py updated successfully."
    } catch {
        Write-Host "‚ùå Failed to update setup.py: $_"
        exit
    }
} else {
    Write-Host "‚úÖ setup.py is already up-to-date."
}

# Execute the Python setup script
$PythonExe = "$env:USERPROFILE\\Python\\python.exe"

if (Test-Path $PythonExe) {
    Write-Host "üöÄ Running setup..."
    & $PythonExe $SetupScriptPath
    Write-Host "‚úÖ Setup completed successfully."
} else {
    Write-Host "‚ùå Python not found. Please install Python and try again."
}
