# === Define Directories Properly ===
$FallbackDir = "C:\PDF_Extractor"

try {
    $UserDocuments = [System.Environment]::GetFolderPath("MyDocuments")
    if ([string]::IsNullOrWhiteSpace($UserDocuments)) {
        throw "Unable to determine user 'Documents' folder."
    }
} catch {
    Write-Host "‚ö† Warning: Failed to fetch 'Documents' directory. Using fallback location: $FallbackDir"
    $UserDocuments = $FallbackDir
}

# Allow custom base directory from config.txt
$ProgramDir = Join-Path $UserDocuments "PDF_Extractor"
$MasterPDFDir = Join-Path $ProgramDir "Master_PDFs"
$ExportsDir = Join-Path $ProgramDir "Exports"
$LogDir = Join-Path $ProgramDir "Logs"
$DependenciesDir = Join-Path $ProgramDir "dependencies"
$ScriptsDir = Join-Path $ProgramDir "Scripts"

# Ensure all directories exist (no admin permissions required)
@($ProgramDir, $MasterPDFDir, $ExportsDir, $LogDir, $DependenciesDir, $ScriptsDir) | ForEach-Object {
    if (!(Test-Path $_)) { 
        try { New-Item -ItemType Directory -Path $_ -Force | Out-Null }
        catch { Write-Host "‚ùå Error creating directory '$_': $($_.Exception.Message)" }
    }
}

# === Define Paths for User Environment (No Admin Required) ===
$PythonVersion = "3.11.6"
$PythonZipUrl = "https://www.python.org/ftp/python/$PythonVersion/python-$PythonVersion-embed-amd64.zip"
$UserPythonFolder = "$DependenciesDir\\Python"
$PythonZipPath = "$DependenciesDir\\python_embed.zip"
$LogFile = "$LogDir\\python_install_log_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
$PythonExe = "$UserPythonFolder\\python.exe"
$PipInstallerPath = "$DependenciesDir\\get-pip.py"

# === Define Modular Dependencies (Installed in Dependencies Folder) ===
$DefaultDependencies = @("pypdf", "pdf2image", "pillow")
$CustomDependencies = @()

# Function to log messages
function Log-Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $LogFile -Value "[$Timestamp] $Message"
    Write-Host $Message
}

# === Start Script Execution ===
Log-Message "üöÄ Starting Python installation (User Environment Only)..."

# === Step 1: Check if Python is already installed in USER Environment ===
if (Test-Path $PythonExe) {
    Log-Message "‚úÖ Python is already installed at $UserPythonFolder"
} else {
    Log-Message "üì• Downloading Python ZIP package..."
    try {
        Invoke-WebRequest -Uri $PythonZipUrl -OutFile $PythonZipPath -ErrorAction Stop
        Start-Sleep -Seconds 5
        
        if (Test-Path $PythonZipPath) {
            Log-Message "üìÇ Extracting Python..."
            Expand-Archive -Path $PythonZipPath -DestinationPath $UserPythonFolder -Force
            Log-Message "‚úÖ Python installed at: $UserPythonFolder"
        } else {
            Log-Message "‚ùå Python download failed. Exiting."
            exit
        }
    } catch { 
        Log-Message "‚ùå Error installing Python: $_"
        exit
    }
}

# === Step 2: Add Python to User PATH (No Admin) ===
$CurrentPath = [System.Environment]::GetEnvironmentVariable("Path", "User")
if ($CurrentPath -notlike "*$UserPythonFolder*") {
    $NewPath = "$UserPythonFolder;$CurrentPath"
    [System.Environment]::SetEnvironmentVariable("Path", $NewPath, "User")
    Log-Message "‚úÖ Added Python to user PATH."
}

# === Step 3: Install pip in USER Space ===
$PipCheck = & "$PythonExe" -m pip --version 2>&1
if ($PipCheck -match "pip") {
    Log-Message "‚úÖ pip is already installed."
} else {
    Log-Message "üì• Downloading and installing pip..."
    try {
        Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile $PipInstallerPath -ErrorAction Stop
        & "$PythonExe" $PipInstallerPath --no-cache-dir --target="$DependenciesDir"
        Log-Message "‚úÖ pip installed successfully."
    } catch { 
        Log-Message "‚ùå Error installing pip: $_"
        exit
    }
}

# === Step 4: Install Required Dependencies in USER Space ===
$DependenciesToInstall = $DefaultDependencies + $CustomDependencies

Log-Message "üîç Checking and installing required dependencies..."
$MissingPackages = & "$PythonExe" -c "
import sys
try:
    import pypdf
    import pdf2image
    from PIL import Image
    print('')
except ModuleNotFoundError as e:
    print(e.name)" 2>&1

if ($MissingPackages -eq "") {
    Log-Message "‚úÖ All dependencies are already installed."
} else {
    foreach ($Package in $MissingPackages -split "`n") {
        if ($DependenciesToInstall -contains $Package) {
            Log-Message "üì¶ Installing $Package..."
            $InstallOutput = & "$PythonExe" -m pip install --target="$DependenciesDir" --no-cache-dir $Package 2>&1
            if ($InstallOutput -match "Successfully installed") {
                Log-Message "‚úÖ Successfully installed $Package."
            } else {
                Log-Message "‚ùå Error installing ${Package}: $InstallOutput"
            }
        }
    }
}

Log-Message "‚úÖ Python setup completed in USER environment."

# === Auto-Install setup.py from GitHub in User Space ===
$SetupScriptUrl = "https://raw.githubusercontent.com/genderlesspit/pdf_extractor/main/setup.py"
$SetupScriptPath = Join-Path $ScriptsDir "setup.py"

# If setup.py does not exist, download it
if (!(Test-Path $SetupScriptPath)) {
    Write-Host "üì• Downloading setup.py..."
    try {
        Invoke-WebRequest -Uri $SetupScriptUrl -OutFile $SetupScriptPath -ErrorAction Stop
        Write-Host "‚úÖ setup.py downloaded successfully."
    } catch {
        Write-Host "‚ùå Failed to download setup.py: $_"
        exit
    }
} else {
    Write-Host "‚úÖ setup.py is already installed."
}

# Verify setup.py before execution
if (!(Test-Path $SetupScriptPath)) {
    Write-Host "‚ùå setup.py was not downloaded properly. Please check the GitHub URL."
    exit
}

## === Execute setup.py in a New Process (User-Level) ===
#Write-Host "üöÄ Running setup.py in a separate process..."
#Start-Process -FilePath $PythonExe -ArgumentList "`"$SetupScriptPath`"" -NoNewWindow -Wait
#Write-Host "‚úÖ Setup completed successfully."
